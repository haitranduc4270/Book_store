{"version":3,"sources":["../../src/core/BaseLayer.ts"],"names":["layerIdCounter","BaseLayer","TYPES","IGlobalConfigService","config","dataSourceNeedUpdate","dataMappingNeedUpdate","filterNeedUpdate","featureScaleNeedUpdate","StyleAttrNeedUpdate","init","SyncBailHook","afterInit","beforeRender","beforeRenderData","SyncWaterfallHook","afterRender","SyncHook","beforePickingEncode","afterPickingEncode","beforeHighlight","afterHighlight","beforeSelect","afterSelect","beforeDestroy","afterDestroy","enable","dataState","getLayerConfig","autoFit","fitBoundsOptions","fitBounds","reRender","name","id","zIndex","rawConfig","maskLayer","masks","push","layerIndex","indexOf","splice","destroy","styleAttributeService","getLayerStyleAttribute","configService","configToUpdate","Object","keys","map","key","inited","needUpdateConfig","sceneId","container","get","SceneID","setLayerConfig","sceneContainer","color","bottomColor","plugin","plugins","layerType","iconService","IIconService","fontService","IFontService","rendererService","IRendererService","layerService","ILayerService","interactionService","IInteractionService","pickingService","IPickingService","mapService","IMapService","enableMultiPassRenderer","passes","length","on","renderLayers","cameraService","ICameraService","coordinateService","ICoordinateSystemService","shaderModuleService","IShaderModuleService","postProcessingPassFactory","IFactoryPostProcessingPass","normalPassFactory","IFactoryNormalPass","IStyleAttributeService","multiPassRenderer","IMultiPassRenderer","setLayer","pendingStyleAttributes","forEach","attributeName","attributeField","attributeValues","updateOptions","updateStyleAttribute","scale","field","splitValuesAndCallbackInAttribute","getAll","ILayerPlugin","apply","hooks","call","emit","target","type","data","attributes","elements","models","m","updateAttributesAndElements","console","warn","option","layerModel","createModelData","calEncodeData","calculateEncodeData","triangulation","createAttributesAndIndices","undefined","updateLayerConfig","getDefaultConfig","animateOption","startAnimate","aniamateStatus","values","lastShape","currentShape","shapeOption","tileLayer","options","rawAnimate","setSource","sourceOption","clusterZoom","layerSource","setData","currentSource","getSource","source","Source","sourceEvent","lastConfig","rest","pass","postProcessingPass","getPostProcessor","getPostProcessingPassByName","styleNeedUpdate","mask","clearModels","buildModels","cfg","scaleOptions","rendering","render","getEncodedData","renderModels","getRenderFlag","activeOption","enableHighlight","highlightColor","mix","activeMix","x","y","pick","pickedFeatureID","then","setTimeout","enableSelect","selectColor","selectMix","blend","layerModelNeedUpdate","visible","clearCanvas","index","updateLayerRenderList","currentPickId","selectedFeatureID","zoom","getZoom","minZoom","Infinity","maxZoom","enableMultiPass","currentPasses","setRenderFlag","getViewportSize","width","height","resize","extent","isValid","some","v","Math","abs","refresh","isDestroied","layerChildren","child","off","clearAllAttributes","cleanRemove","removeAllListeners","model","getLayerStyleAttributes","filter","attribute","needRescale","needRemapping","needRegenerateVertices","cluster","updateClusterData","encodedData","getLayerAttributeScale","invertExtent","items","range","item","value","ticks","domain","triggerHover","box","cb","boxPickLayer","moduleName","vertexShader","fragmentShader","segmentNumber","registerModule","vs","fs","getModule","uniforms","createModel","BlendTypes","BlendType","normal","createAttributes","clock","getDelta","animateStartTime","getElapsedTime","stopAnimate","isPick","eventNames","isVisible","Error","isPicking","renderUpdate","draw","getUninforms","getShaderPickStat","time","valuesOrCallback","defaultValues","callback","EventEmitter"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from '@antv/async-hook';\nimport {\n  BlendType,\n  gl,\n  IActiveOption,\n  IAnimateOption,\n  IAttrubuteAndElements,\n  ICameraService,\n  ICoordinateSystemService,\n  IDataState,\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  IIconService,\n  IInteractionService,\n  ILayer,\n  ILayerConfig,\n  ILayerModel,\n  ILayerModelInitializationOptions,\n  ILayerPlugin,\n  ILayerService,\n  ILegendClassificaItem,\n  ILegendSegmentItem,\n  IMapService,\n  IModel,\n  IModelInitializationOptions,\n  IMultiPassRenderer,\n  IPass,\n  IPickingService,\n  IPostProcessingPass,\n  IRendererService,\n  IScale,\n  IScaleOptions,\n  IShaderModuleService,\n  ISource,\n  ISourceCFG,\n  IStyleAttributeInitializationOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  LayerEventType,\n  lazyInject,\n  LegendItems,\n  ScaleAttributeType,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleAttributeField,\n  StyleAttributeOption,\n  Triangulation,\n  TYPES,\n} from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { isFunction, isObject, isUndefined } from 'lodash';\nimport { BlendTypes } from '../utils/blend';\nimport { handleStyleDataMapping } from '../utils/dataMappingStyle';\nimport { calculateData } from '../utils/layerData';\nimport {\n  createMultiPassRenderer,\n  normalizePasses,\n} from '../utils/multiPassRender';\nimport { updateShape } from '../utils/updateShape';\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\n\nexport default class BaseLayer<ChildLayerStyleOptions = {}>\n  extends EventEmitter<LayerEventType>\n  implements ILayer {\n  public id: string = `${layerIdCounter++}`;\n  public name: string = `${layerIdCounter}`;\n  public type: string;\n  public visible: boolean = true;\n  public zIndex: number = 0;\n  public minZoom: number;\n  public maxZoom: number;\n  public inited: boolean = false;\n  public layerModelNeedUpdate: boolean = false;\n  public pickedFeatureID: number | null = null;\n  public selectedFeatureID: number | null = null;\n  public styleNeedUpdate: boolean = false;\n  public rendering: boolean;\n  public clusterZoom: number = 0; // 聚合等级标记\n  public layerType?: string | undefined;\n  public triangulation?: Triangulation | undefined;\n\n  public dataState: IDataState = {\n    dataSourceNeedUpdate: false,\n    dataMappingNeedUpdate: false,\n    filterNeedUpdate: false,\n    featureScaleNeedUpdate: false,\n    StyleAttrNeedUpdate: false,\n  };\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncBailHook(),\n    afterInit: new SyncBailHook(),\n    beforeRender: new SyncBailHook(),\n    beforeRenderData: new SyncWaterfallHook(),\n    afterRender: new SyncHook(),\n    beforePickingEncode: new SyncHook(),\n    afterPickingEncode: new SyncHook(),\n    beforeHighlight: new SyncHook(['pickedColor']),\n    afterHighlight: new SyncHook(),\n    beforeSelect: new SyncHook(['pickedColor']),\n    afterSelect: new SyncHook(),\n    beforeDestroy: new SyncHook(),\n    afterDestroy: new SyncHook(),\n  };\n\n  // 待渲染 model 列表\n  public models: IModel[] = [];\n\n  // 每个 Layer 都有一个\n  public multiPassRenderer: IMultiPassRenderer;\n\n  // 注入插件集\n  public plugins: ILayerPlugin[];\n\n  public sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n\n  public layerModel: ILayerModel;\n\n  public shapeOption: {\n    field: any;\n    values: any;\n  };\n\n  // TODO: 记录 sceneContainer 供创建子图层的时候使用 如 imageTileLayer\n  public sceneContainer: Container | undefined;\n  public tileLayer: any | undefined;\n  // TODO: 用于保存子图层对象\n  public layerChildren: ILayer[] = [];\n  public masks: ILayer[] = [];\n  // Tip: 用于标识矢量图层\n  public isVector: boolean = false;\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  // @lazyInject(TYPES.IShaderModuleService)\n  // protected readonly shaderModuleService: IShaderModuleService;\n\n  protected shaderModuleService: IShaderModuleService;\n  protected cameraService: ICameraService;\n\n  protected coordinateService: ICoordinateSystemService;\n\n  protected iconService: IIconService;\n\n  protected fontService: IFontService;\n\n  protected pickingService: IPickingService;\n\n  protected rendererService: IRendererService;\n\n  protected layerService: ILayerService;\n\n  protected interactionService: IInteractionService;\n\n  protected mapService: IMapService;\n\n  protected styleAttributeService: IStyleAttributeService;\n\n  protected layerSource: Source;\n\n  protected postProcessingPassFactory: (\n    name: string,\n  ) => IPostProcessingPass<unknown>;\n  protected normalPassFactory: (name: string) => IPass<unknown>;\n\n  protected animateOptions: IAnimateOption = { enable: false };\n\n  /**\n   * 图层容器\n   */\n  private container: Container;\n\n  private encodedData: IEncodeFeature[];\n\n  private configSchema: object;\n\n  private currentPickId: number | null = null;\n\n  private rawConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  private needUpdateConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  /**\n   * 待更新样式属性，在初始化阶段完成注册\n   */\n  private pendingStyleAttributes: Array<{\n    attributeName: string;\n    attributeField: StyleAttributeField;\n    attributeValues?: StyleAttributeOption;\n    defaultName?: string;\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>;\n  }> = [];\n\n  private scaleOptions: IScaleOptions = {};\n\n  private animateStartTime: number;\n\n  private aniamateStatus: boolean = false;\n\n  // TODO: layer 保底颜色\n  private bottomColor = 'rgba(0, 0, 0, 0)';\n\n  private isDestroied: boolean = false;\n\n  // private pickingPassRender: IPass<'pixelPicking'>;\n\n  constructor(config: Partial<ILayerConfig & ChildLayerStyleOptions> = {}) {\n    super();\n    this.name = config.name || this.id;\n    this.zIndex = config.zIndex || 0;\n    this.rawConfig = config;\n  }\n\n  public addMaskLayer(maskLayer: ILayer) {\n    this.masks.push(maskLayer);\n  }\n\n  public removeMaskLayer(maskLayer: ILayer) {\n    const layerIndex = this.masks.indexOf(maskLayer);\n    if (layerIndex > -1) {\n      this.masks.splice(layerIndex, 1);\n    }\n    maskLayer.destroy();\n  }\n\n  public getAttribute(name: string) {\n    return this.styleAttributeService.getLayerStyleAttribute(name);\n  }\n\n  public getLayerConfig() {\n    return this.configService.getLayerConfig<ChildLayerStyleOptions>(this.id);\n  }\n\n  public updateLayerConfig(\n    configToUpdate: Partial<ILayerConfig | ChildLayerStyleOptions>,\n  ) {\n    // 同步 rawConfig\n    Object.keys(configToUpdate).map((key) => {\n      if (key in this.rawConfig) {\n        // @ts-ignore\n        this.rawConfig[key] = configToUpdate[key];\n      }\n    });\n    if (!this.inited) {\n      this.needUpdateConfig = {\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      };\n    } else {\n      const sceneId = this.container.get<string>(TYPES.SceneID);\n\n      // @ts-ignore\n      handleStyleDataMapping(configToUpdate, this); // 处理 style 中进行数据映射的属性字段\n\n      this.configService.setLayerConfig(sceneId, this.id, {\n        ...this.configService.getLayerConfig(this.id),\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      });\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  public setContainer(container: Container, sceneContainer: Container) {\n    this.container = container;\n    this.sceneContainer = sceneContainer;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public setBottomColor(color: string) {\n    this.bottomColor = color;\n  }\n\n  public getBottomColor() {\n    return this.bottomColor;\n  }\n\n  public addPlugin(plugin: ILayerPlugin): ILayer {\n    // TODO: 控制插件注册顺序\n    // @example:\n    // pointLayer.addPlugin(new MyCustomPlugin(), {\n    //   before: 'L7BuiltinPlugin'\n    // });\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  public init() {\n    // 设置配置项\n    const sceneId = this.container.get<string>(TYPES.SceneID);\n    // 初始化图层配置项\n    // const { enableMultiPassRenderer = false } = this.rawConfig;\n    // this.configService.setLayerConfig(sceneId, this.id, {\n    //   enableMultiPassRenderer,\n    // });\n    this.configService.setLayerConfig(sceneId, this.id, this.rawConfig);\n    this.layerType = this.rawConfig.layerType;\n\n    // 全局容器服务\n\n    // 场景容器服务\n    this.iconService = this.container.get<IIconService>(TYPES.IIconService);\n    this.fontService = this.container.get<IFontService>(TYPES.IFontService);\n\n    this.rendererService = this.container.get<IRendererService>(\n      TYPES.IRendererService,\n    );\n    this.layerService = this.container.get<ILayerService>(TYPES.ILayerService);\n    this.interactionService = this.container.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n\n    this.pickingService = this.container.get<IPickingService>(\n      TYPES.IPickingService,\n    );\n    this.mapService = this.container.get<IMapService>(TYPES.IMapService);\n    const { enableMultiPassRenderer, passes } = this.getLayerConfig();\n    if (enableMultiPassRenderer && passes?.length && passes.length > 0) {\n      // Tip: 兼容 multiPassRender 在 amap1 时存在的图层不同步问题 zoom\n      this.mapService.on('mapAfterFrameChange', () => {\n        this.renderLayers();\n      });\n    }\n\n    this.cameraService = this.container.get<ICameraService>(\n      TYPES.ICameraService,\n    );\n    this.coordinateService = this.container.get<ICoordinateSystemService>(\n      TYPES.ICoordinateSystemService,\n    );\n    this.shaderModuleService = this.container.get<IShaderModuleService>(\n      TYPES.IShaderModuleService,\n    );\n    this.postProcessingPassFactory = this.container.get(\n      TYPES.IFactoryPostProcessingPass,\n    );\n    this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n\n    // 图层容器服务\n    this.styleAttributeService = this.container.get<IStyleAttributeService>(\n      TYPES.IStyleAttributeService,\n    );\n    this.multiPassRenderer = this.container.get<IMultiPassRenderer>(\n      TYPES.IMultiPassRenderer,\n    );\n    this.multiPassRenderer.setLayer(this);\n\n    // 完成样式服务注册完成前添加的属性\n    this.pendingStyleAttributes.forEach(\n      ({ attributeName, attributeField, attributeValues, updateOptions }) => {\n        this.styleAttributeService.updateStyleAttribute(\n          attributeName,\n          {\n            // @ts-ignore\n            scale: {\n              field: attributeField,\n              ...this.splitValuesAndCallbackInAttribute(\n                // @ts-ignore\n                attributeValues,\n                // @ts-ignore\n                this.getLayerConfig()[attributeName],\n              ),\n            },\n          },\n          // @ts-ignore\n          updateOptions,\n        );\n      },\n    );\n    this.pendingStyleAttributes = [];\n\n    // 获取插件集\n    this.plugins = this.container.getAll<ILayerPlugin>(TYPES.ILayerPlugin);\n    // 完成插件注册，传入场景和图层容器内的服务\n    for (const plugin of this.plugins) {\n      plugin.apply(this, {\n        rendererService: this.rendererService,\n        mapService: this.mapService,\n        styleAttributeService: this.styleAttributeService,\n        normalPassFactory: this.normalPassFactory,\n        postProcessingPassFactory: this.postProcessingPassFactory,\n      });\n    }\n\n    // 触发 init 生命周期插件\n    this.hooks.init.call();\n    // this.pickingPassRender = this.normalPassFactory('pixelPicking');\n    // this.pickingPassRender.init(this);\n    this.hooks.afterInit.call();\n    // 触发初始化完成事件;\n    this.emit('inited', {\n      target: this,\n      type: 'inited',\n    });\n    this.emit('add', {\n      target: this,\n      type: 'add',\n    });\n\n    return this;\n  }\n\n  public updateModelData(data: IAttrubuteAndElements) {\n    if (data.attributes && data.elements) {\n      this.models.map((m) => {\n        m.updateAttributesAndElements(data.attributes, data.elements);\n      });\n    } else {\n      console.warn('data error');\n    }\n  }\n\n  public createModelData(data: any, option?: ISourceCFG) {\n    if (this.layerModel.createModelData) {\n      // 在某些特殊图层中单独构建 attribute & elements\n      return this.layerModel.createModelData(option);\n    }\n    const calEncodeData = this.calculateEncodeData(data, option);\n    const triangulation = this.triangulation;\n\n    if (calEncodeData && triangulation) {\n      return this.styleAttributeService.createAttributesAndIndices(\n        calEncodeData,\n        triangulation,\n      );\n    } else {\n      return {\n        attributes: undefined,\n        elements: undefined,\n      };\n    }\n  }\n\n  public calculateEncodeData(data: any, option?: ISourceCFG) {\n    if (this.inited) {\n      return calculateData(\n        this,\n        this.fontService,\n        this.mapService,\n        this.styleAttributeService,\n        data,\n        option,\n      );\n    } else {\n      console.warn('layer not inited!');\n      return null;\n    }\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  public prepareBuildModel() {\n    this.inited = true;\n    this.updateLayerConfig({\n      ...(this.getDefaultConfig() as object),\n      ...this.rawConfig,\n    });\n\n    // 启动动画\n    const { animateOption } = this.getLayerConfig();\n    if (animateOption?.enable) {\n      this.layerService.startAnimate();\n      this.aniamateStatus = true;\n    }\n  }\n  public color(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    // 设置 color、size、shape、style 时由于场景服务尚未完成（并没有调用 scene.addLayer），因此暂时加入待更新属性列表\n    this.updateStyleAttribute('color', field, values, updateOptions);\n\n    // this.pendingStyleAttributes.push({\n    //   attributeName: 'color',\n    //   attributeField: field,\n    //   attributeValues: values,\n    //   defaultName: 'colors',\n    //   updateOptions,\n    // });\n    return this;\n  }\n\n  // 为对应的图层传入纹理的编号名称（point/image 在 shape 方法中传入纹理名称的方法并不通用）\n  public texture(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('texture', field, values, updateOptions);\n    return this;\n  }\n\n  public rotate(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('rotate', field, values, updateOptions);\n    return this;\n  }\n  public size(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('size', field, values, updateOptions);\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  public filter(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.updateStyleAttribute('filter', field, values, updateOptions);\n    return this;\n  }\n\n  public shape(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    const lastShape = this.styleAttributeService?.getLayerStyleAttribute(\n      'shape',\n    )?.scale?.field;\n    const currentShape = field;\n    this.shapeOption = {\n      field,\n      values,\n    };\n    this.updateStyleAttribute('shape', field, values, updateOptions);\n    // TODO: 根据 shape 判断是否需要更新 model\n    if (!this.tileLayer) {\n      updateShape(this, lastShape, currentShape);\n    }\n    return this;\n  }\n  public label(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  public animate(options: IAnimateOption | boolean) {\n    let rawAnimate: Partial<IAnimateOption> = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = {\n        ...rawAnimate,\n        ...options,\n      };\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate,\n    });\n    // this.animateOptions = options;\n    return this;\n  }\n\n  public source(data: any, options?: ISourceCFG): ILayer {\n    if (data?.data) {\n      // 判断是否为source\n      this.setSource(data);\n      return this;\n    }\n    this.sourceOption = {\n      data,\n      options,\n    };\n    this.clusterZoom = 0;\n    return this;\n  }\n\n  public setData(data: any, options?: ISourceCFG) {\n    if (this.inited) {\n      this.layerSource.setData(data, options);\n    } else {\n      this.on('inited', () => {\n        const currentSource = this.getSource();\n        if (!currentSource) {\n          // 执行 setData 的时候 source 还不存在（还未执行 addLayer）\n          this.source(new Source(data, options));\n          this.sourceEvent();\n        } else {\n          this.layerSource.setData(data, options);\n        }\n        // this.layerSource.setData(data, options);\n      });\n    }\n\n    return this;\n  }\n  public style(\n    options: Partial<ChildLayerStyleOptions> & Partial<ILayerConfig>,\n  ): ILayer {\n    const lastConfig = this.getLayerConfig();\n    const { passes, ...rest } = options;\n\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(\n        (pass: [string, { [key: string]: unknown }]) => {\n          const postProcessingPass = this.multiPassRenderer\n            .getPostProcessor()\n            .getPostProcessingPassByName(pass[0]);\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        },\n      );\n    }\n\n    this.rawConfig = {\n      ...this.rawConfig,\n      ...rest,\n    };\n    if (this.container) {\n      this.updateLayerConfig(this.rawConfig);\n      this.styleNeedUpdate = true;\n    }\n\n    // @ts-ignore\n    if (lastConfig && lastConfig.mask === true && options.mask === false) {\n      this.clearModels();\n      this.models = this.layerModel.buildModels();\n    }\n    return this;\n  }\n  public scale(field: string | number | IScaleOptions, cfg?: IScale) {\n    if (isObject(field)) {\n      this.scaleOptions = {\n        ...this.scaleOptions,\n        ...field,\n      };\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    return this;\n  }\n\n  /**\n   * 渲染所有的图层\n   */\n  public renderLayers(): void {\n    this.rendering = true;\n\n    this.layerService.renderLayers();\n\n    this.rendering = false;\n  }\n\n  public render(): ILayer {\n    if (this.tileLayer !== undefined) {\n      // 瓦片图层执行单独的 render 渲染队列\n      this.tileLayer.render();\n      return this;\n    }\n    // TODO: this.getEncodedData().length !== 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length !== 0) {\n      this.renderModels();\n    }\n    return this;\n  }\n\n  /**\n   * renderMultiPass 专门用于渲染支持 multipass 的 layer\n   */\n  public async renderMultiPass() {\n    if (this.getEncodedData().length !== 0) {\n      if (this.multiPassRenderer && this.multiPassRenderer.getRenderFlag()) {\n        // multi render 开始执行 multiPassRender 的渲染流程\n        await this.multiPassRenderer.render();\n      } else if (this.multiPassRenderer) {\n        // renderPass 触发的渲染\n        this.renderModels();\n      } else {\n        this.renderModels();\n      }\n    }\n  }\n\n  public active(options: IActiveOption | boolean) {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n      if (options.mix) {\n        activeOption.activeMix = options.mix;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  public setActive(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().activeMix,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n        activeMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().activeMix,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n\n  public select(option: IActiveOption | boolean): ILayer {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n      if (option.mix) {\n        activeOption.selectMix = option.mix;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n\n  public setSelect(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n        selectMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().selectMix,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n        selectMix: isObject(options)\n          ? options.mix\n          : this.getLayerConfig().selectMix,\n      });\n      this.hooks.beforeSelect\n        .call(encodePickingColor(id as number) as number[])\n        // @ts-ignore\n        .then(() => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        });\n    }\n  }\n  public setBlend(type: keyof typeof BlendType): ILayer {\n    this.updateLayerConfig({\n      blend: type,\n    });\n    this.layerModelNeedUpdate = true;\n    this.reRender();\n    return this;\n  }\n  public show(): ILayer {\n    this.updateLayerConfig({\n      visible: true,\n    });\n    this.reRender();\n    return this;\n  }\n\n  public hide(): ILayer {\n    if (this.type === 'CanvasLayer' && this.layerModel.clearCanvas) {\n      // 对 canvasLayer 的 hide 操作做特殊处理\n      this.layerModel.clearCanvas();\n    }\n    this.updateLayerConfig({\n      visible: false,\n    });\n    this.reRender();\n    return this;\n  }\n  public setIndex(index: number): ILayer {\n    this.zIndex = index;\n    this.layerService.updateLayerRenderList();\n    this.layerService.renderLayers();\n    return this;\n  }\n\n  public setCurrentPickId(id: number) {\n    this.currentPickId = id;\n  }\n\n  public getCurrentPickId(): number | null {\n    return this.currentPickId;\n  }\n\n  public setCurrentSelectedId(id: number) {\n    this.selectedFeatureID = id;\n  }\n\n  public getCurrentSelectedId(): number | null {\n    return this.selectedFeatureID;\n  }\n  public isVisible(): boolean {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom <= maxZoom;\n  }\n\n  public setMultiPass(\n    enableMultiPass: boolean,\n    currentPasses?: Array<string | [string, { [key: string]: unknown }]>,\n  ) {\n    this.updateLayerConfig({\n      enableMultiPassRenderer: enableMultiPass,\n    });\n    if (currentPasses) {\n      this.updateLayerConfig({\n        passes: currentPasses,\n      });\n    }\n\n    if (enableMultiPass) {\n      const { passes = [] } = this.getLayerConfig();\n      this.multiPassRenderer = createMultiPassRenderer(\n        this,\n        passes,\n        this.postProcessingPassFactory,\n        this.normalPassFactory,\n      );\n      this.multiPassRenderer.setRenderFlag(true);\n      const { width, height } = this.rendererService.getViewportSize();\n      this.multiPassRenderer.resize(width, height);\n    }\n\n    return this;\n  }\n\n  public setMinZoom(minZoom: number): ILayer {\n    this.updateLayerConfig({\n      minZoom,\n    });\n    return this;\n  }\n\n  public getMinZoom(): number {\n    const { minZoom } = this.getLayerConfig();\n    return minZoom as number;\n  }\n\n  public getMaxZoom(): number {\n    const { maxZoom } = this.getLayerConfig();\n    return maxZoom as number;\n  }\n\n  public get(name: string) {\n    const cfg = this.getLayerConfig();\n    // @ts-ignore\n    return cfg[name];\n  }\n\n  public setMaxZoom(maxZoom: number): ILayer {\n    this.updateLayerConfig({\n      maxZoom,\n    });\n    return this;\n  }\n\n  public setAutoFit(autoFit: boolean): ILayer {\n    this.updateLayerConfig({\n      autoFit,\n    });\n    return this;\n  }\n\n  /**\n   * zoom to layer Bounds\n   */\n  public fitBounds(fitBoundsOptions?: unknown): ILayer {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true,\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    const isValid = extent.some((v) => Math.abs(v) === Infinity);\n    if (isValid) {\n      return this;\n    }\n    this.mapService.fitBounds(\n      [\n        [extent[0], extent[1]],\n        [extent[2], extent[3]],\n      ],\n      fitBoundsOptions,\n    );\n    return this;\n  }\n\n  public destroy(refresh = true) {\n    if (this.isDestroied) {\n      return;\n    }\n\n    // remove child layer\n    this.layerChildren.map((child: ILayer) => child.destroy());\n    this.layerChildren = [];\n\n    // remove mask list\n    this.masks.map((mask: ILayer) => mask.destroy());\n    this.masks = [];\n\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n\n    this.multiPassRenderer.destroy();\n    // console.log(this.styleAttributeService.getAttributes())\n    // 清除所有属性以及关联的 vao == 销毁所有 => model this.models.forEach((model) => model.destroy());\n    this.styleAttributeService.clearAllAttributes();\n\n    // 执行每个图层单独的 clearModels 方法 （清除一些额外的 texture、program、buffer 等）\n\n    this.hooks.afterDestroy.call();\n\n    // TODO: 清除各个图层自定义的 models 资源\n    this.layerModel?.clearModels();\n\n    this.models = [];\n\n    this.layerService.cleanRemove(this, refresh);\n\n    this.emit('remove', {\n      target: this,\n      type: 'remove',\n    });\n\n    this.emit('destroy', {\n      target: this,\n      type: 'destroy',\n    });\n\n    this.removeAllListeners();\n    // 解绑图层容器中的服务\n    // this.container.unbind(TYPES.IStyleAttributeService);\n\n    this.isDestroied = true;\n  }\n  public clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n  }\n  public clearModels() {\n    this.models.forEach((model) => model.destroy());\n    this.layerModel.clearModels();\n    this.models = [];\n  }\n\n  public isDirty() {\n    return !!(\n      this.styleAttributeService.getLayerStyleAttributes() || []\n    ).filter(\n      (attribute) =>\n        attribute.needRescale ||\n        attribute.needRemapping ||\n        attribute.needRegenerateVertices,\n    ).length;\n  }\n\n  public setSource(source: Source) {\n    // 清除旧 sources 事件\n    if (this.layerSource) {\n      this.layerSource.off('update', this.sourceEvent);\n    }\n\n    this.layerSource = source;\n    this.clusterZoom = 0;\n\n    // 已 inited 且启用聚合进行更新聚合数据\n    if (this.inited && this.layerSource.cluster) {\n      const zoom = this.mapService.getZoom();\n      this.layerSource.updateClusterData(zoom);\n    }\n    // source 可能会复用，会在其它layer被修改\n    this.layerSource.on('update', this.sourceEvent);\n  }\n  public getSource() {\n    return this.layerSource;\n  }\n\n  public getScaleOptions() {\n    return this.scaleOptions;\n  }\n\n  public setEncodedData(encodedData: IEncodeFeature[]) {\n    this.encodedData = encodedData;\n  }\n  public getEncodedData() {\n    return this.encodedData;\n  }\n\n  public getScale(name: string): any {\n    return this.styleAttributeService.getLayerAttributeScale(name);\n  }\n\n  public getLegendItems(name: string): LegendItems {\n    const scale = this.styleAttributeService.getLayerAttributeScale(name);\n\n    // 函数自定义映射，没有 scale 返回为空数组\n    if (!scale) {\n      return [];\n    }\n\n    if (scale.invertExtent) {\n      // 分段类型  Quantize、Quantile、Threshold\n      const items: ILegendSegmentItem[] = scale.range().map((item: number) => {\n        return {\n          value: scale.invertExtent(item),\n          [name]: item,\n        };\n      });\n\n      return items;\n    } else if (scale.ticks) {\n      // 连续类型 Continuous (Linear, Power, Log, Identity, Time)\n      const items: ILegendClassificaItem[] = scale\n        .ticks()\n        .map((item: string) => {\n          return {\n            value: item,\n            [name]: scale(item),\n          };\n        });\n\n      return items;\n    } else if (scale?.domain) {\n      // 枚举类型 Cat\n      const items: ILegendClassificaItem[] = scale\n        .domain()\n        .filter((item: string | number | undefined) => !isUndefined(item))\n        .map((item: string | number) => {\n          return {\n            value: item,\n            [name]: scale(item) as string,\n          };\n        });\n\n      return items;\n    }\n\n    return [];\n  }\n\n  public pick({ x, y }: { x: number; y: number }) {\n    this.interactionService.triggerHover({ x, y });\n  }\n\n  public boxSelect(\n    box: [number, number, number, number],\n    cb: (...args: any[]) => void,\n  ) {\n    this.pickingService.boxPickLayer(this, box, cb);\n  }\n\n  public buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel {\n    const {\n      moduleName,\n      vertexShader,\n      fragmentShader,\n      triangulation,\n      segmentNumber,\n      ...rest\n    } = options;\n    this.shaderModuleService.registerModule(moduleName, {\n      vs: vertexShader,\n      fs: fragmentShader,\n    });\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(moduleName);\n    const { createModel } = this.rendererService;\n    const {\n      attributes,\n      elements,\n    } = this.styleAttributeService.createAttributesAndIndices(\n      this.encodedData,\n      triangulation,\n      segmentNumber,\n    );\n    return createModel({\n      attributes,\n      uniforms,\n      fs,\n      vs,\n      elements,\n      blend: BlendTypes[BlendType.normal],\n      ...rest,\n    });\n  }\n\n  public createAttrubutes(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ) {\n    const { triangulation } = options;\n    // @ts-ignore\n    const { attributes } = this.styleAttributeService.createAttributes(\n      this.encodedData,\n      triangulation,\n    );\n    return attributes;\n  }\n\n  public getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  public setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  public stopAnimate() {\n    if (this.aniamateStatus) {\n      this.layerService.stopAnimate();\n      this.aniamateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false,\n        },\n      });\n    }\n  }\n  public getLayerAnimateTime(): number {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n\n  public needPick(type: string): boolean {\n    const {\n      enableHighlight = true,\n      enableSelect = true,\n    } = this.getLayerConfig();\n    // 判断layer是否监听事件;\n    let isPick =\n      this.eventNames().indexOf(type) !== -1 ||\n      this.eventNames().indexOf('un' + type) !== -1;\n    if ((type === 'click' || type === 'dblclick') && enableSelect) {\n      isPick = true;\n    }\n    if (\n      type === 'mousemove' &&\n      (enableHighlight ||\n        this.eventNames().indexOf('mouseenter') !== -1 ||\n        this.eventNames().indexOf('unmousemove') !== -1 ||\n        this.eventNames().indexOf('mouseout') !== -1)\n    ) {\n      isPick = true;\n    }\n    return this.isVisible() && isPick;\n  }\n\n  public buildModels() {\n    throw new Error('Method not implemented.');\n  }\n  public rebuildModels() {\n    throw new Error('Method not implemented.');\n  }\n\n  public async renderMulPass(multiPassRenderer: IMultiPassRenderer) {\n    await multiPassRenderer.render();\n  }\n\n  public renderModels(isPicking?: boolean) {\n    // TODO: this.getEncodedData().length > 0 这个判断是为了解决在 2.5.x 引入数据纹理后产生的 空数据渲染导致 texture 超出上限问题\n    if (this.getEncodedData().length > 0) {\n      if (this.layerModelNeedUpdate && this.layerModel) {\n        this.models = this.layerModel.buildModels();\n        this.hooks.beforeRender.call();\n        this.layerModelNeedUpdate = false;\n      }\n      if (this.layerModel.renderUpdate) {\n        this.layerModel.renderUpdate();\n      }\n      this.models.forEach((model) => {\n        model.draw(\n          {\n            uniforms: this.layerModel.getUninforms(),\n          },\n          isPicking,\n        );\n      });\n    }\n    return this;\n  }\n\n  public updateStyleAttribute(\n    type: string,\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    if (!this.inited) {\n      this.pendingStyleAttributes.push({\n        attributeName: type,\n        attributeField: field,\n        attributeValues: values,\n        updateOptions,\n      });\n    } else {\n      this.styleAttributeService.updateStyleAttribute(\n        type,\n        {\n          // @ts-ignore\n          scale: {\n            field,\n            ...this.splitValuesAndCallbackInAttribute(\n              // @ts-ignore\n              values,\n              // @ts-ignore\n              this.getLayerConfig()[field],\n            ),\n          },\n        },\n        // @ts-ignore\n        updateOptions,\n      );\n    }\n  }\n\n  public getShaderPickStat() {\n    return this.layerService.getShaderPickStat();\n  }\n\n  /**\n   * 继承空方法\n   * @param time\n   */\n  public setEarthTime(time: number) {\n    console.warn('empty fn');\n  }\n\n  protected getConfigSchema() {\n    throw new Error('Method not implemented.');\n  }\n\n  protected getModelType(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  protected getDefaultConfig() {\n    return {};\n  }\n\n  private sourceEvent = () => {\n    this.dataState.dataSourceNeedUpdate = true;\n    const { autoFit, fitBoundsOptions } = this.getLayerConfig();\n    if (autoFit) {\n      this.fitBounds(fitBoundsOptions);\n    }\n    // 对外暴露事件 迁移到 DataMappingPlugin generateMapping，保证在重新重新映射后触发\n    // this.emit('dataUpdate');\n    this.reRender();\n  };\n\n  private reRender() {\n    if (this.inited) {\n      this.layerService.updateLayerRenderList();\n      this.layerService.renderLayers();\n    }\n  }\n  private splitValuesAndCallbackInAttribute(\n    valuesOrCallback?: unknown[],\n    defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback)\n        ? undefined\n        : valuesOrCallback || defaultValues,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined,\n    };\n  }\n}\n"],"file":"BaseLayer.js"}