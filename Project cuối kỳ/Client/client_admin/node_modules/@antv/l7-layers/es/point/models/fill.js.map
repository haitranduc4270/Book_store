{"version":3,"sources":["../../../src/point/models/fill.ts"],"names":["AttributeType","gl","$window","getMask","BaseModel","PointFillTriangulation","Version","FillModel","layer","getLayerConfig","opacity","strokeOpacity","strokeWidth","stroke","offsets","blend","blur","raisingHeight","unit","updateUnit","dataTextureTest","dataTextureNeedUpdate","judgeStyleAttributes","encodeData","getEncodedData","calDataFrame","cellLength","cellProperties","data","width","height","rowCount","dataTexture","length","createTexture2D","flipY","format","LUMINANCE","type","FLOAT","u_raisingHeight","Number","u_meter2coord","meter2coord","u_meteryScale","meteryScale","u_isMeter","isMeter","u_blur","u_additive","u_dataTexture","u_cellTypeLayout","getCellTypeLayout","u_opacity","u_stroke_opacity","u_stroke_width","u_stroke_color","getStrokeColor","u_offsets","isOffsetStatic","animateOption","enable","u_aimate","animateOption2Array","u_time","getLayerAnimateTime","styleAttributeService","createAttributesAndIndices","buildModels","getSource","extent","minLng","minLat","maxLng","maxLat","center","version","mapService","mapboxContext","mapboxgl","MAPBOX","MercatorCoordinate","coord","fromLngLat","lng","lat","offsetInMercatorCoordinateUnits","meterInMercatorCoordinateUnits","westCoord","x","y","z","westLnglat","toLngLat","southCoord","southLnglat","m1","meterToCoord","m2","Boolean","mask","maskInside","getShaders","frag","vert","triangulation","buildLayerModel","moduleName","vertexShader","fragmentShader","depth","getBlend","stencil","waveFillFrag","pointFillVert","pointFillFrag","destroy","option","speed","rings","registerStyleAttribute","name","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","size","update","feature","featureIdx","vertex","attributeIdx","extrude","extrudeIndex","Array","isArray","shape","shape2d","shapeIndex","indexOf","L7MAP","GLOBEL","calMeter2Coord"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport { $window, getMask } from '@antv/l7-utils';\nimport { isNumber } from 'lodash';\nimport BaseModel from '../../core/BaseModel';\nimport { IPointLayerStyleOptions } from '../../core/interface';\nimport { PointFillTriangulation } from '../../core/triangulation';\n// animate pointLayer shader - support animate\nimport waveFillFrag from '../shaders/animate/wave_frag.glsl';\n// static pointLayer shader - not support animate\nimport pointFillFrag from '../shaders/fill_frag.glsl';\nimport pointFillVert from '../shaders/fill_vert.glsl';\n\nimport { Version } from '@antv/l7-maps';\nexport default class FillModel extends BaseModel {\n  private meter2coord: number = 1;\n  private meteryScale: number = 1; // 兼容 mapbox\n  private isMeter: boolean = false;\n\n  private unit: string = 'l7size';\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      strokeOpacity = 1,\n      strokeWidth = 0,\n      stroke = 'rgba(0,0,0,0)',\n      offsets = [0, 0],\n      blend,\n      blur = 0,\n      raisingHeight = 0,\n      unit = 'l7size',\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    this.updateUnit(unit);\n\n    if (\n      this.dataTextureTest &&\n      this.dataTextureNeedUpdate({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      })\n    ) {\n      // 判断当前的样式中哪些是需要进行数据映射的，哪些是常量，同时计算用于构建数据纹理的一些中间变量\n      this.judgeStyleAttributes({\n        opacity,\n        strokeOpacity,\n        strokeWidth,\n        stroke,\n        offsets,\n      });\n\n      const encodeData = this.layer.getEncodedData();\n      const { data, width, height } = this.calDataFrame(\n        this.cellLength,\n        encodeData,\n        this.cellProperties,\n      );\n      this.rowCount = height; // 当前数据纹理有多少行\n\n      this.dataTexture =\n        this.cellLength > 0 && data.length > 0\n          ? this.createTexture2D({\n              flipY: true,\n              data,\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width,\n              height,\n            })\n          : this.createTexture2D({\n              flipY: true,\n              data: [1],\n              format: gl.LUMINANCE,\n              type: gl.FLOAT,\n              width: 1,\n              height: 1,\n            });\n    }\n    return {\n      u_raisingHeight: Number(raisingHeight),\n\n      u_meter2coord: this.meter2coord,\n      u_meteryScale: this.meteryScale,\n      u_isMeter: Number(this.isMeter),\n      u_blur: blur,\n\n      u_additive: blend === 'additive' ? 1.0 : 0.0,\n      u_dataTexture: this.dataTexture, // 数据纹理 - 有数据映射的时候纹理中带数据，若没有任何数据映射时纹理是 [1]\n      u_cellTypeLayout: this.getCellTypeLayout(),\n\n      u_opacity: isNumber(opacity) ? opacity : 1.0,\n      u_stroke_opacity: isNumber(strokeOpacity) ? strokeOpacity : 1.0,\n      u_stroke_width: isNumber(strokeWidth) ? strokeWidth : 1.0,\n      u_stroke_color: this.getStrokeColor(stroke),\n      u_offsets: this.isOffsetStatic(offsets)\n        ? (offsets as [number, number])\n        : [0, 0],\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const {\n      animateOption = { enable: false },\n    } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n\n  public initModels(): IModel[] {\n    this.updateUnit('l7size');\n\n    return this.buildModels();\n  }\n\n  /**\n   * 计算等面积点图层（unit meter）笛卡尔坐标标度与世界坐标标度的比例\n   * @returns\n   */\n  public calMeter2Coord() {\n    const [minLng, minLat, maxLng, maxLat] = this.layer.getSource().extent;\n    const center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n\n    const { version } = this.mapService;\n    const mapboxContext = $window?.mapboxgl;\n    if (version === Version.MAPBOX && mapboxContext?.MercatorCoordinate) {\n      // 参考：\n      // https://docs.mapbox.com/mapbox-gl-js/api/geography/#mercatorcoordinate#meterinmercatorcoordinateunits\n      const coord = mapboxContext.MercatorCoordinate.fromLngLat(\n        { lng: center[0], lat: center[1] },\n        0,\n      );\n      const offsetInMercatorCoordinateUnits = coord.meterInMercatorCoordinateUnits();\n      const westCoord = new mapboxContext.MercatorCoordinate(\n        coord.x - offsetInMercatorCoordinateUnits,\n        coord.y,\n        coord.z,\n      );\n      const westLnglat = westCoord.toLngLat();\n\n      const southCoord = new mapboxContext.MercatorCoordinate(\n        coord.x,\n        coord.y - offsetInMercatorCoordinateUnits,\n        coord.z,\n      );\n      const southLnglat = southCoord.toLngLat();\n\n      this.meter2coord = center[0] - westLnglat.lng;\n\n      this.meteryScale = (southLnglat.lat - center[1]) / this.meter2coord;\n      return;\n    }\n\n    const m1 = this.mapService.meterToCoord(center, [minLng, minLat]);\n    const m2 = this.mapService.meterToCoord(center, [\n      maxLng === minLng ? maxLng + 0.1 : maxLng,\n      maxLat === minLat ? minLat + 0.1 : maxLat,\n    ]);\n    this.meter2coord = (m1 + m2) / 2;\n    if (!Boolean(this.meter2coord)) {\n      // Tip: 兼容单个数据导致的 m1、m2 为 NaN\n      this.meter2coord = 7.70681090738883;\n    }\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      mask = false,\n      maskInside = true,\n      animateOption = { enable: false },\n    } = this.layer.getLayerConfig() as Partial<\n      ILayerConfig & IPointLayerStyleOptions\n    >;\n    const { frag, vert, type } = this.getShaders(animateOption);\n\n    this.layer.triangulation = PointFillTriangulation;\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointfill_' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: PointFillTriangulation,\n        depth: { enable: false },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside),\n      }),\n    ];\n  }\n\n  /**\n   * 根据 animateOption 的值返回对应的 shader 代码\n   * @returns\n   */\n  public getShaders(\n    animateOption: Partial<IAnimateOption>,\n  ): { frag: string; vert: string; type: string } {\n    if (animateOption.enable) {\n      switch (animateOption.type) {\n        case 'wave':\n          return {\n            frag: waveFillFrag,\n            vert: pointFillVert,\n            type: 'wave',\n          };\n        default:\n          return {\n            frag: waveFillFrag,\n            vert: pointFillVert,\n            type: 'wave',\n          };\n      }\n    } else {\n      return {\n        frag: pointFillFrag,\n        vert: pointFillVert,\n        type: 'normal',\n      };\n    }\n  }\n\n  public clearModels() {\n    this.dataTexture?.destroy();\n  }\n\n  // overwrite baseModel func\n  protected animateOption2Array(option: Partial<IAnimateOption>): number[] {\n    return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n          const extrudeIndex = (attributeIdx % 4) * 3;\n          return [\n            extrude[extrudeIndex],\n            extrude[extrudeIndex + 1],\n            extrude[extrudeIndex + 2],\n          ];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'shape',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Shape',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { shape = 2 } = feature;\n          const shape2d = this.layer.getLayerConfig().shape2d as string[];\n          const shapeIndex = shape2d.indexOf(shape as string);\n          return [shapeIndex];\n        },\n      },\n    });\n  }\n\n  /**\n   * 判断是否更新点图层的计量单位\n   * @param unit\n   */\n  private updateUnit(unit: string) {\n    const { version } = this.mapService;\n    if (this.unit !== unit) {\n      // l7size => meter\n      if (\n        this.unit !== 'meter' &&\n        unit === 'meter' &&\n        version !== Version.L7MAP &&\n        version !== Version.GLOBEL\n      ) {\n        this.isMeter = true;\n        this.calMeter2Coord();\n        // meter => l7size\n      } else if (this.unit === 'meter' && unit !== 'meter') {\n        this.isMeter = false;\n        this.meter2coord = 1;\n      }\n      this.unit = unit;\n    }\n  }\n}\n"],"file":"fill.js"}